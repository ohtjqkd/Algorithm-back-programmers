class Node:
    def __init__(self, value):
        self.value = value
        self.prev = None
        self.next = None
        
class Mgmt:
    def __init__(self, n, k):
        self.head = Node(0)
        curr_node = self.head
        for i in range(1, n):
            nxt = Node(i)
            curr_node.next, nxt.prev = nxt, curr_node
            if i == k:
                self.curr_node = nxt
            curr_node = nxt
        self.stack = []
        self.check = [1 for _ in range(n)]
        
    def move_up(self, x):
        while self.curr_node and x > 0:
            self.curr_node = self.curr_node.prev
            x -= 1
    
    def move_down(self, x):
        while self.curr_node and x > 0:
            self.curr_node = self.curr_node.next
            x -= 1
    
    def remove(self):
        prev, nxt = self.curr_node.prev, self.curr_node.next
        if prev:
            prev.next = nxt
        if nxt:
            nxt.prev = prev
        self.stack.append(self.curr_node)
        self.check[self.curr_node.value] = 0
        if nxt == None:
            self.curr_node = prev
        else:
            self.curr_node = nxt
    
    def undo(self):
        if self.stack:
            ud = self.stack.pop()
            prev, nxt = ud.prev, ud.next
            if prev:
                prev.next = ud
            if nxt:
                nxt.prev = ud
            self.check[ud.value] = 1
    

def solution(n, k, cmd):
    answer = ''
    mgmt = Mgmt(n, k)
    for command in cmd:
        curr_cmd = command.split(" ")
        if curr_cmd[0] == "U":
            mgmt.move_up(int(curr_cmd[1]))
        elif curr_cmd[0] == "D":
            mgmt.move_down(int(curr_cmd[1]))
        elif curr_cmd[0] == "C":
            mgmt.remove()
        else:
            mgmt.undo()
    answer = ["O" if mgmt.check[i] == 1 else "X" for i in range(n)]

    return ''.join(answer)